// Generated by CoffeeScript 1.8.0
(function() {
  define(["color", "input"], function(color) {
    var canvas, canvasClear, canvasRect, canvasText, createElement, display, height, makeContext, renderTarget, renderWorld, width;
    canvas = null;
    width = null;
    height = null;
    createElement = function(html) {
      var div;
      div = document.createElement("DIV");
      div.innerHTML = html;
      return div.firstChild;
    };
    makeContext = function(state) {
      var canvasEle;
      width = state.width, height = state.height;
      canvasEle = createElement("<canvas id='g-canvas' width='" + width + "' height='" + height + "'/>");
      document.body.appendChild(canvasEle);
      return canvas = canvasEle.getContext('2d');
    };
    canvasClear = function() {
      return canvas.clearRect(0, 0, canvas.canvas.width, canvas.canvas.height);
    };
    canvasRect = function(object) {
      var error;
      try {
        canvas.fillStyle = object.color;
        return canvas.fillRect(object.x, object.y, object.width, object.height);
      } catch (_error) {
        error = _error;
        return console.error(error);
      }
    };
    canvasText = function(message, x, y) {
      if (x == null) {
        x = width - 200;
      }
      if (y == null) {
        y = 20;
      }
      canvas.fillStyle = color.rgb(0, 0, 0);
      canvas.font = "16px consolas";
      return canvas.fillText(message, x, y);
    };
    renderTarget = function(target) {
      switch (target.shape) {
        case "Rectangle":
          return canvasRect(target);
        case "Text":
          return canvasText(target.message, target.x, target.y);
      }
    };
    renderWorld = function(state, targets) {
      var target, _i, _len;
      canvasClear();
      for (_i = 0, _len = targets.length; _i < _len; _i++) {
        target = targets[_i];
        renderTarget(target);
      }
      if (display.showFPS) {
        return canvasText("" + (~~(1000 / state.frameElapsed)) + " fps");
      }
    };
    return display = {
      init: makeContext,
      renderWorld: renderWorld,
      showFPS: false
    };
  });

}).call(this);

//# sourceMappingURL=display.map
